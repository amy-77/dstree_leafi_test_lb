//
// Created by Qitong Wang on 2023/5/14.
// Copyright (c) 2023 Université Paris Cité. All rights reserved.
//

#include <iostream>
#include <vector>

#include <gsl/gsl_spline.h>
#include <gsl/gsl_errno.h>

int main(int argc, char *argv[]) {
  // Generate some sample data
//  const int n = 10;
//  double x[n], y[n];
//  for (int i = 0; i < n; i++) {
//    x[i] = i;
//    y[i] = sin(i);
//  }

  std::vector<double> x{0.297500, 0.300000, 0.302500, 0.305000, 0.307500, 0.310000, 0.312500, 0.315000, 0.317500, 0.320000, 0.325000, 0.327500, 0.330000, 0.332500, 0.335000, 0.337500, 0.340000, 0.342500, 0.350000, 0.352500, 0.355000, 0.357500, 0.362500, 0.365000, 0.367500, 0.370000, 0.380000, 0.382500, 0.385000, 0.387500, 0.390000, 0.392500, 0.395000, 0.397500, 0.400000, 0.402500, 0.405000, 0.407500, 0.410000, 0.417500, 0.420000, 0.422500, 0.425000, 0.427500, 0.430000, 0.432500, 0.435000, 0.440000, 0.447500, 0.450000, 0.452500, 0.455000, 0.457500, 0.460000, 0.462500, 0.467500, 0.470000, 0.472500, 0.475000, 0.477500, 0.480000, 0.485000, 0.487500, 0.490000, 0.492500, 0.497500, 0.500000, 0.502500, 0.505000, 0.507500, 0.510000, 0.512500, 0.515000, 0.517500, 0.520000, 0.522500, 0.525000, 0.527500, 0.532500, 0.540000, 0.545000, 0.547500, 0.552500, 0.555000, 0.557500, 0.560000, 0.562500, 0.565000, 0.567500, 0.570000, 0.572500, 0.577500, 0.580000, 0.582500, 0.585000, 0.590000, 0.592500, 0.597500, 0.605000, 0.607500, 0.610000, 0.612500, 0.615000, 0.620000, 0.622500, 0.627500, 0.635000, 0.637500, 0.645000, 0.647500, 0.652500, 0.655000, 0.657500, 0.660000, 0.662500, 0.665000, 0.670000, 0.672500, 0.680000, 0.682500, 0.685000, 0.692500, 0.695000, 0.705000, 0.707500, 0.710000, 0.712500, 0.720000, 0.722500, 0.725000, 0.727500, 0.730000, 0.732500, 0.735000, 0.742500, 0.745000, 0.747500, 0.750000, 0.757500, 0.762500, 0.765000, 0.767500, 0.772500, 0.775000, 0.777500, 0.785000, 0.790000, 0.797500, 0.802500, 0.810000, 0.815000, 0.817500, 0.820000, 0.822500, 0.830000, 0.837500, 0.842500, 0.850000, 0.852500, 0.855000, 0.857500, 0.865000, 0.870000, 0.875000, 0.880000, 0.882500, 0.887500, 0.892500, 0.895000, 0.902500, 0.912500, 0.915000, 0.917500, 0.922500, 0.927500, 0.930000, 0.932500, 0.937500, 0.940000, 0.947500, 0.950000, 0.957500, 0.965000, 0.975000, 0.982500, 0.990000, 0.995000, 0.997500, 1.000000};
  std::vector<double> y{0.006798, 0.011901, 0.020879, 0.022153, 0.026512, 0.036640, 0.044047, 0.048195, 0.100104, 0.114645, 0.128876, 0.135036, 0.156417, 0.156777, 0.165725, 0.195777, 0.212292, 0.231411, 0.240138, 0.243395, 0.244215, 0.256779, 0.264498, 0.272915, 0.283088, 0.288383, 0.291189, 0.324068, 0.329112, 0.329277, 0.331133, 0.333147, 0.337734, 0.370562, 0.377230, 0.392958, 0.399393, 0.400834, 0.413640, 0.440031, 0.443235, 0.470205, 0.503523, 0.517424, 0.517586, 0.525759, 0.552554, 0.556436, 0.583396, 0.583755, 0.585525, 0.598928, 0.607146, 0.627228, 0.640894, 0.652725, 0.661412, 0.664813, 0.689280, 0.693207, 0.697088, 0.708785, 0.716201, 0.746766, 0.748882, 0.749530, 0.780167, 0.786570, 0.813684, 0.816974, 0.822879, 0.826790, 0.827679, 0.829555, 0.830231, 0.831597, 0.858986, 0.870579, 0.873761, 0.885459, 0.888623, 0.918215, 0.925232, 0.937691, 0.939689, 0.943583, 0.964842, 0.993962, 1.005394, 1.007743, 1.011067, 1.013727, 1.017259, 1.049176, 1.071918, 1.079719, 1.102322, 1.107530, 1.109733, 1.120615, 1.122272, 1.124475, 1.144730, 1.158169, 1.170931, 1.176610, 1.177455, 1.187850, 1.200400, 1.205907, 1.211160, 1.213047, 1.279367, 1.282184, 1.300653, 1.308782, 1.336721, 1.345401, 1.350680, 1.355332, 1.355652, 1.361496, 1.376618, 1.396767, 1.402842, 1.431942, 1.437055, 1.439342, 1.454185, 1.465833, 1.495235, 1.504935, 1.508050, 1.513966, 1.515977, 1.519341, 1.530785, 1.537968, 1.552904, 1.558081, 1.573760, 1.578606, 1.591696, 1.613195, 1.622626, 1.622664, 1.628238, 1.628568, 1.630047, 1.645827, 1.720164, 1.747862, 1.752269, 1.766342, 1.779811, 1.794624, 1.798224, 1.799110, 1.812191, 1.831456, 1.836221, 1.866996, 1.868384, 1.868929, 1.919524, 1.930405, 1.933035, 1.959167, 2.035126, 2.072459, 2.094551, 2.140990, 2.144891, 2.157166, 2.182938, 2.281016, 2.326758, 2.341225, 2.343612, 2.398282, 2.636441, 2.822433, 2.853403, 2.915835, 2.918347, 2.982640, 3.095453, 3.758288, 4.243806};

  int n = x.size();
  x[n - 1] = 0.9999;

  double sum = 0;
  for (int i = 0; i < y.size(); ++i) {
    sum += y[i];
  }
  y.push_back(sum);
  x.push_back(0.99999);
  n = x.size();

  std::cout << sum << std::endl;

  // Create a gsl_interp_accel and gsl_spline object and fit it to the data
  gsl_interp_accel *acc = gsl_interp_accel_alloc();
//  gsl_spline *spline = gsl_spline_alloc(gsl_interp_cspline, n);
  gsl_spline *spline_steffen = gsl_spline_alloc(gsl_interp_steffen, n);
  gsl_spline_init(spline_steffen, x.data(), y.data(), n);

  // Evaluate the spline at some new points
//  double x_new = 4.5;
//  double y_new = gsl_spline_eval(spline, x_new, acc);
//
//  std::cout << "Interpolated value at x = " << x_new << " is " << y_new << std::endl;

  double MAX_I = 1000;
  for (int i = 0; i < 1000; ++i) {
    if (i > 0) {
      std::cout << ", ";
    }

    std::cout << gsl_spline_eval(spline_steffen, 0.3 + 0.7 * i / MAX_I, acc);
  }

  // Clean up the gsl_interp_accel and gsl_spline objects
  gsl_spline_free(spline_steffen);
  gsl_interp_accel_free(acc);

  return 0;
}
